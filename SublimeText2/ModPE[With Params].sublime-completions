/*
	ModPE IDE For Sublime Text 2
	Creator : DevilLord & Clagdriff
	Don't Copy Our Code Without Our Permission.
*/

{
	"scope": "source.js",

	"completions":
	[
		{ "trigger": "addItemInventory", "contents": "addItemInventory(id,data,amount)" },
		{ "trigger": "clientMessage", "contents": "clientMessage(msg)" },
		{ "trigger": "explode", "contents": "explode(x, y, z, radius)" },
		{ "trigger": "getCarriedItem", "contents": "getCarriedItem()" },
		{ "trigger": "getLevel", "contents": "getLevel()" },
		{ "trigger": "getPitch", "contents": "getPitch()" },
		{ "trigger": "getPlayerEnt", "contents": "getPlayerEnt()" },
		{ "trigger": "getPlayerX", "contents": "getPlayerX()" },
		{ "trigger": "getPlayerY", "contents": "getPlayerY()" },
		{ "trigger": "getPlayerZ", "contents": "getPlayerZ()" },
		{ "trigger": "getTile", "contents": "getTile(x,y,z)" },
		{ "trigger": "getYaw", "contents": "getYaw()" },
		{ "trigger": "preventDefault", "contents": "preventDefault()" },
		{ "trigger": "print", "contents": "print(msg)" },
		{ "trigger": "rideAnimal", "contents": "rideAnimal(riderEnt,mountEnt)" },
		{ "trigger": "setNightMode", "contents": "setNightMode(isNight)" },
		{ "trigger": "setPosition", "contents": "setPosition(ent,x,y,z)" },
		{ "trigger": "setPositionRelative", "contents": "setPositionRelative(ent,x,y,z)" },
		{ "trigger": "setRot", "contents": "setRot(ent,yaw,pitch)" },
		{ "trigger": "setTile", "contents": "setTile(x,y,z,blockid,blockdamage)" },
		{ "trigger": "setVelX", "contents": "setVelX(ent,velX)" },
		{ "trigger": "setVelY", "contents": "setVelY(ent,velY)" },
		{ "trigger": "setVelZ", "contents": "setVelZ(ent,velZ)" },
		{ "trigger": "ModPE.joinServer", "contents": "ModPE.joinServer(ip,port)" },
		{ "trigger": "ModPE.langEdit", "contents": "ModPE.langEdit(langName,newName)" },
		{ "trigger": "ModPE.leaveGame", "contents": "ModPE.leaveGame()" },
		{ "trigger": "ModPE.log", "contents": "ModPE.log(msg)" },
		{ "trigger": "ModPE.overrideTexture", "contents": "ModPE.overrideTexture(textureFile,textureUrl)" },
		{ "trigger": "ModPE.selectLevel", "contents": "ModPE.selectLevel(levelDir,levelName,levelSeed,levelGameMode)" },
		{ "trigger": "ModPE.setFoodItem", "contents": "ModPE.setFoodItem(id,itemPngY,itemPngX,heartRecoverAmount,Name)" },
		{ "trigger": "ModPE.setGameSpeed", "contents": "ModPE.setGameSpeed(ticks)" },
		{ "trigger": "ModPE.setGuiBlocks", "contents": "ModPE.setGuiBlocks(url)" },
		{ "trigger": "ModPE.setItem", "contents": "ModPE.setItem(id,itemPngY,itemPngZ,name)" },
		{ "trigger": "ModPE.setTerrain", "contents": "ModPE.setTerrain(url)" },
		{ "trigger": "ModPE.takeScreenshot", "contents": "ModPE.takeScreenshot(filename)" },
		{ "trigger": "Item.addCraftRecipe", "contents": "Item.addCraftRecipe(id,count,damage,[inputId,inputCount,inputDamage])" },
		{ "trigger": "Item.addFurnaceRecipe", "contents": "Item.addFurnaceRecipe(outputId,outputdamage,inputId)" },
		{ "trigger": "Item.setCategory", "contents": "Item.setCategory(int category)" },
		{ "trigger": "Item.addShapedRecipe", "contents": "Item.addShapedRecipe(id, count, damage, [topSquare, middleSquare, bottomSquare], [key, itemId, itemDamage,key,itemId,itemDamage])" },
		{ "trigger": "Level.addParticle", "contents": "Level.addParticle(ParticleType,x,y,z,velX,velY,velZ,size)" },
		{ "trigger": "Level.dropItem", "contents": "Level.dropItem(x,y,z,range,id,count,damage)" },
		{ "trigger": "Level.getAddress", "contents": "Level.getAddress()" },
		{ "trigger": "Level.getChestSlot", "contents": "Level.getChestSlot(x,y,z,int slot)" },
		{ "trigger": "Level.getChestSlotCount", "contents": "Level.getChestSlotCount(x,y,z,int slot)" },
		{ "trigger": "Level.getChestSlotData", "contents": "Level.getChestSlotData(x,y,z,int slot)" },
		{ "trigger": "Level.getData", "contents": "Level.getData()" },
		{ "trigger": "Level.getGameMode", "contents": "Level.getGameMode(int gameMode)" },
		{ "trigger": "Level.getSignText", "contents": "Level.getSignText(x,y,z,int line)" },
		{ "trigger": "Level.getTile", "contents": "Level.getTile(x,y,z)" },
		{ "trigger": "Level.getTime", "contents": "Level.getTime()" },
		{ "trigger": "Level.getWorldDir", "contents": "Level.getWorldDir()" },
		{ "trigger": "Level.playSound", "contents": "Level.playSound(x,y,z,String Sound,volume,pitch)" },
		{ "trigger": "Level.getWorldName", "contents": "Level.getWorldName()" },
		{ "trigger": "Level.playSoundEnt", "contents": "Level.playSoundEnt(ent,String Sound,volume,pitch)" },
		{ "trigger": "Level.setChestSlot", "contents": "Level.setChestSlot(x,y,z,int slot,id,damage,count)" },
		{ "trigger": "Level.setNightMode", "contents": "Level.setNightMode(boolean)" },
		{ "trigger": "Level.setSpawn", "contents": "Level.setSpawn(x,y,z)" },
		{ "trigger": "Level.setTile", "contents": "Level.setTile(x,y,z,id)" },
		{ "trigger": "Level.setTime", "contents": "Level.setTime(int time)" },
		{ "trigger": "Level.getBrightness", "contents": "Level.getBrightness(x,y,z)" },
		{ "trigger": "Player.addItemInventory", "contents": "Player.addItemInventory(id,data,amount)" },
		{ "trigger": "Player.clearInventorySlot", "contents": "Player.clearInventorySlot(int slot)" },
		{ "trigger": "Player.getArmorSlot", "contents": "Player.getArmorSlot(int armorSlot)" },
		{ "trigger": "Player.getArmorSlotDamage", "contents": "Player.getArmorSlotDamage(int armorSlot)" },
		{ "trigger": "Player.getCarriedItem", "contents": "Player.getCarriedItem()" },
		{ "trigger": "Player.getCarriedItemCount", "contents": "Player.getCarriedItemCount()" },
		{ "trigger": "Player.getCarriedItemData", "contents": "Player.getCarriedItemData()" },
		{ "trigger": "Player.getEntity", "contents": "Player.getEntity()" },
		{ "trigger": "Player.getInventorySlot", "contents": "Player.getInventorySlot(int slot)" },
		{ "trigger": "Player.getInventorySlotCount", "contents": "Player.getInventorySlotCount(int slot)" },
		{ "trigger": "Player.getInventorySlotData", "contents": "Player.getInventorySlotData(int slot)" },
		{ "trigger": "Player.getSelectedSlotId", "contents": "Player.getSelectedSlotId()" },
		{ "trigger": "Player.getX", "contents": "Player.getX()" },
		{ "trigger": "Player.getY", "contents": "Player.getY()" },
		{ "trigger": "Player.getZ", "contents": "Player.getZ()" },
		{ "trigger": "Player.setCanFly", "contents": "Player.setCanFly(1/0)" },
		{ "trigger": "Player.setArmorSlot", "contents": "Player.setArmorSlot(int slot,id,damage)" },
		{ "trigger": "Player.setHealth", "contents": "Player.setHealth(health)" },
		{ "trigger": "Player.addItemCreativeInv", "contents": "Player.addItemCreativeInv(id,amount,damage)" },
		{ "trigger": "Entity.addEffect", "contents": "Entity.addEffect(ent,Effect Name,duration,amplication or level,ambient,boolean showParticle)" },
		{ "trigger": "Entity.getAnimalAge", "contents": "Entity.getAnimalAge(ent)" },
		{ "trigger": "Entity.getEntityTypeId", "contents": "Entity.getEntityTypeId(ent)" },
		{ "trigger": "Entity.getHealth", "contents": "Entity.getHealth(ent)" },
		{ "trigger": "Entity.getPitch", "contents": "Entity.getPitch(ent)" },
		{ "trigger": "Entity.getX", "contents": "Entity.getX(ent)" },
		{ "trigger": "Entity.getZ", "contents": "Entity.getZ(ent)" },
		{ "trigger": "Entity.getY", "contents": "Entity.getY(ent)" },
		{ "trigger": "Entity.getYaw", "contents": "Entity.getYaw(ent)" },
		{ "trigger": "Entity.getPitch", "contents": "Entity.getPitch(ent)" },
		{ "trigger": "Entity.remove", "contents": "Entity.remove(ent)" },
		{ "trigger": "Entity.rideAnimal", "contents": "Entity.rideAnimal(rider,mount)" },
		{ "trigger": "Entity.setAnimalAge", "contents": "Entity.setAnimalAge(ent,age)" },
		{ "trigger": "Entity.setCarriedItem", "contents": "Entity.setCarriedItem(ent,id,count,damage)" },
		{ "trigger": "Entity.setFireTicks", "contents": "Entity.setFireTicks(ent,duration)" },
		{ "trigger": "Entity.setHealth", "contents": "Entity.setHealth(ent,health)" },
		{ "trigger": "Entity.setMobSkin", "contents": "Entity.setMobSkin(ent,String Texture Location)" },
		{ "trigger": "Entity.setPosition", "contents": "Entity.setPosition(ent,x,y,z)" },
		{ "trigger": "Entity.setPositionRelative", "contents": "Entity.setPositionRelative(ent,x,y,z)" },
		{ "trigger": "Entity.setRenderType", "contents": "Entity.setRenderType(ent,renderType)" },
		{ "trigger": "Entity.setRot", "contents": "Entity.setRot(ent,yaw,pitch)" },
		{ "trigger": "Entity.setVelX", "contents": "Entity.setVelX()" },
		{ "trigger": "Entity.setVelY", "contents": "Entity.setVelY()" },
		{ "trigger": "Entity.setVelZ", "contents": "Entity.setVelZ()" },
		{ "trigger": "Entity.spawnMob", "contents": "Entity.spawnMob(x,y,z,ent,String Texture)" },
		{ "trigger": "Block.defineBlock", "contents": "Block.defineBlock(id,StringName,StringTexture,TextureData,BooleanOpaque,int renderType)" },
		{ "trigger": "Block.setColor", "contents": "Block.setColor(id,HTML Color)" },
		{ "trigger": "Block.setDestroyTime", "contents": "Block.setDestroyTime(id, Time)" },
		{ "trigger": "Block.setExplosionResistance", "contents": "Block.setExplosionResistance(id,explosion resistance)" },
		{ "trigger": "Block.setLightLevel", "contents": "Block.setLightLevel(id,int lightlevel)" },
		{ "trigger": "Block.setLightOpacity", "contents": "Block.setLightOpacity(id,int lightOpacityLevel)" },
		{ "trigger": "Block.setRenderLayer", "contents": "Block.setRenderLayer(id,int renderLayer)" }
	]
}
